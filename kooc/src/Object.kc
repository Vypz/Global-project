@import "Object.kh"

unsigned long strlen(const char *s);
int strcmp(const char *s1, const char *s2);
int strncmp(const char *s1, const char *s2, unsigned long n);
char *strrchr(const char *s, int c);
char *strstr(const char *haystack, const char *needle);

@implementation	Object
{
  @member int	isInstanceOf(Object* other)
  {
    if (strcmp(VTABLE_Object(self)->name, VTABLE_Object(other)->name) == 0)
      return 1;
    else
      return 0;
  }

  @member int	isInstanceOf(const char* otherClassName)
  {
    const char*	selfClassName;

    selfClassName = VTABLE_Object(self)->name;
    if (strrchr(selfClassName, '.'))
      selfClassName = strrchr(selfClassName, '.') + 1;
    if (strcmp(selfClassName, otherClassName) == 0)
      return 1;
    else
      return 0;
  }

  @member int	isKindOf(Object* other)
  {
    if (strncmp(VTABLE_Object(self)->name, VTABLE_Object(other)->name,
		strlen(VTABLE_Object(other)->name)) == 0 &&
	(VTABLE_Object(self)->name[strlen(VTABLE_Object(other)->name)] == '.' ||
	 VTABLE_Object(self)->name[strlen(VTABLE_Object(other)->name)] == '\0'))
      return 1;
    else
      return 0;
  }

  @member int	isKindOf(const char* otherClassName)
  {
    const char*	selfClassName = VTABLE_Object(self)->name;

    while ((selfClassName = strstr(selfClassName, otherClassName)) != 0)
      if ((selfClassName == VTABLE_Object(self)->name || selfClassName[-1] == '.') &&
	  (selfClassName[strlen(otherClassName)] == '.' ||
	   selfClassName[strlen(otherClassName)] == '\0'))
	return 1;
    return 0;
  }
}
